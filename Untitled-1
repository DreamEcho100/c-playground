/*

BETACan’t read the text? 
Switch
 theme
1. Question 1

In a school, there are n students who want to participate in an academic decathlon. The teacher wants to select the maximum number of students possible. Each student has a certain skill level. For the team to be uniform, it is important that when the skill levels of its members are arranged in increasing order, the difference between any two consecutive skill levels is either 0 or 1. Find the maximum team size the teacher can form.

 

Example

skills = [10, 12, 13, 9, 14]

 

Valid teams, sorted are {9, 10}, and {12, 13, 14}. These teams have team sizes 2 and 3 respectively, so the maximum team size is 3.

 

Function Description 

Complete the function findMaxTeamSize in the editor below.

 

findMaxTeamSize has the following parameter:

    int skills[n]:  the skill levels of each student

 

Returns

    int:  the maximum possible size of the team

 

Constraints

1 ≤ n ≤ 105
1 ≤ skills[i] ≤ 109

 

Input Format For Custom Testing
Sample Case 0

Sample Input 0

STDIN    Function
-----    --------
4    →    skills[] size n = 4
4    →    skills = [4, 13, 2, 3]
13
2
3

 

Sample Output 0

3

 

Explanation 0

 

There are two valid teams possible: {2, 3, 4} and {13}. These have team sizes of 3 and 1, respectively.
*/

'use strict';

import { WriteStream, createWriteStream } from "fs";
process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString: string = '';
let inputLines: string[] = [];
let currentLine: number = 0;

process.stdin.on('data', function (inputStdin: string): void {
    inputString += inputStdin;
});

process.stdin.on('end', function (): void {
    inputLines = inputString.split('\n');
    inputString = '';

    main();
});

function readLine(): string {
    return inputLines[currentLine++];
}



/*
 * Complete the 'findMaxTeamSize' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY skills as parameter.
 */

function findMaxTeamSize(skills: number[]): number {
    // Write your code here
    const skillsLength = skills.length;
    if (skillsLength === 0 || skillsLength === 1) {
        return skillsLength;
    }

    const sortedSkilles = [...skills].sort((a, b) => a - b);
    let currentTeamsSize = 1;
    let maxTeamsSize = 0;

    for (let i = 1; i < skillsLength; ++i) {
        if (sortedSkilles[i] - sortedSkilles[i - 1] == 0 || sortedSkilles[i] - sortedSkilles[i - 1] == 1) {
            currentTeamsSize++;
        } else {
            maxTeamsSize = Math.max(maxTeamsSize, currentTeamsSize);
            currentTeamsSize = 1;
        }
    }

    maxTeamsSize = Math.max(maxTeamsSize, currentTeamsSize);

    return maxTeamsSize;
}

function main() {
    const ws: WriteStream = createWriteStream(process.env['OUTPUT_PATH']);

    const skillsCount: number = parseInt(readLine().trim(), 10);

    let skills: number[] = [];

    for (let i: number = 0; i < skillsCount; ++i) {
        const skillsItem: number = parseInt(readLine().trim(), 10);

        skills.push(skillsItem);
    }

    const result: number = findMaxTeamSize(skills);

    ws.write(result + '\n');

    ws.end();
}
